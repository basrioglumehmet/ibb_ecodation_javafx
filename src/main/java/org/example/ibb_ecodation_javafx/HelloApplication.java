package org.example.ibb_ecodation_javafx;

import javafx.application.Application;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.paint.Color;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import org.example.ibb_ecodation_javafx.common.util.GuiAnimationUtil;
import org.example.ibb_ecodation_javafx.constant.ViewPathConstant;
import org.example.ibb_ecodation_javafx.database.SingletonDBConnection;
import org.example.ibb_ecodation_javafx.security.BcryptEncoder;
import org.mindrot.jbcrypt.BCrypt;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Statement;

public class HelloApplication extends Application {
    @Override
    public void start(Stage stage) throws IOException {
        // Set up the UI
        FXMLLoader fxmlLoader = new FXMLLoader(HelloApplication.class.getResource(ViewPathConstant.LOGIN));
        Parent parent = fxmlLoader.load();
        Scene scene = new Scene(parent);
        scene.setFill(Color.TRANSPARENT);
        stage.initStyle(StageStyle.TRANSPARENT);
        stage.setTitle("Login");
        stage.setScene(scene);

        // Initialize the database
        initializeDatabase();

        GuiAnimationUtil.runAnimation(parent);
        stage.show();
    }

    /// //////////////////////////////////////////////////////////////////////////
    /// DATABASE
    private void initializeDatabase() {
        try {
            Connection conn = SingletonDBConnection.getInstance().getConnection();
            Statement stmt = conn.createStatement();

            String createTableSQL = """
                CREATE TABLE IF NOT EXISTS users (
                    id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    username VARCHAR(50) NOT NULL UNIQUE,
                    password VARCHAR(255) NOT NULL,
                    email VARCHAR(100) NOT NULL UNIQUE,
                    role VARCHAR(100) DEFAULT 'USER'
                );
            CREATE TABLE IF NOT EXISTS vats (
             id INT AUTO_INCREMENT PRIMARY KEY,
             amount DOUBLE NOT NULL,
             vatRate DOUBLE NOT NULL,
             vatAmount DOUBLE NOT NULL,
             totalAmount DOUBLE NOT NULL,
             receiptNumber VARCHAR(100) NOT NULL,
             transactionDate DATE NOT NULL,
             description VARCHAR(255),
             exportFormat VARCHAR(50)
         );""";
            stmt.execute(createTableSQL);

            // Kullanıcı ekleme
            String insertSQL = """
            MERGE INTO users (username, password, email, role)
            KEY(username) VALUES (?, ?, ?, ?);
        """;
            try (PreparedStatement ps = conn.prepareStatement(insertSQL)) {
                // 1. kullanıcı
                ps.setString(1, "test");
                ps.setString(2, BcryptEncoder.hashPassword("test"));
                ps.setString(3, "test@gmail.com");
                ps.setString(4, "USER");
                ps.executeUpdate();

                // 2. kullanıcı
                ps.setString(1, "admin");
                //ps.setString(2, BCrypt.hashpw("root", BCrypt.gensalt()));
                ps.setString(2, BcryptEncoder.hashPassword("0000"));
                ps.setString(3, "root@gmail.com");
                ps.setString(4, "ADMIN");
                ps.executeUpdate();
            } catch (NoSuchAlgorithmException e) {
                throw new RuntimeException(e);
            }

            System.out.println("✅ BCrypt ile şifrelenmiş ve roller atanmış kullanıcılar başarıyla eklendi.");

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    public static void main(String[] args) {
        launch();
    }
}
